class Solution {
    public int coinChange(int[] coins, int amount) {
    Arrays.sort(coins);
    //zero based that's why we are adding 1.
    int[] dp = new int[amount + 1];
    Arrays.fill(dp, amount + 1);
    dp[0] = 0;
    for(int i = 0; i <= amount; i++){
        // iterate through every coin
        for(int j = 0; j<coins.length; j++){
            if(coins[j] <= i){
                dp[i] = Math.min(dp[i], 1 + dp[i - coins[j]]);
            } else {
                break;
            }
        }
    }
    return dp[amount] > amount ? -1 : dp[amount];
    }
}

Steps

1) sort the coins.
2) create a new dp and we are adding 1 because its a zero based index or you can we are adding 1 in amount because of the coin we are using.
3) fill the array.
4) dp[0] = 0, means we have set, in order to form 0 amount we need 0 coins.
5) we will take min for ` dp[i] = Math.min(dp[i], 1 + dp[i - coins[j]]);` , here i is the amount we are taking and coins[j] is the minimun no.of coins required to form that amount.
6) last thing is `return dp[amount] > amount ? -1 : dp[amount];` if your dp[amount] is bigger than the amount given then return -1 otherwise simply return the dp[amount].
7) refernce - [Link](https://www.youtube.com/watch?v=hxaTNNQmx4c&ab_channel=AlgorithmsMadeEasy)