class Solution {
    public int maximalRectangle(char[][] matrix) {
    if(matrix.length == 0) return 0;
        int m = matrix.length, n = matrix[0].length;
        int[] heights = new int[n];
        int maxArea = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(matrix[i][j] == '0')
                    heights[j] = 0;
                if(matrix[i][j] == '1')
                    heights[j] += 1;
            }
            maxArea = Math.max(maxArea, largestRectangleArea(heights));
        }
        return maxArea;
    }
    
// below solution is a part of largest rectangle in histogram question
    public int largestRectangleArea(int[] heights) {
     Stack<Integer> st = new Stack<>();
        
        st.push(-1);
        int maxArea =0;
        for(int i=0 ; i <= heights.length; i++){
            int val = i==heights.length?0:heights[i];
            
            while(st.peek() != -1 && heights[st.peek()] >= val){
                int h = heights[st.pop()];
                int rm = i;
                int lm = st.peek();
                maxArea = Math.max(maxArea, h*(rm-lm-1));
            }
            st.push(i);
        }
        return maxArea;
    }
}